

    ViewResolver是用来将String类型的视图名（有点地方也叫做逻辑视图，都是指同一个东西）和Locale解析为View类型的视图，ViewResolver接口
也非常简单，只有一个方法，定义如下：

    //org.springframework.web.servlet.ViewResolver;
    public interface ViewResolver {

    	View resolveViewName(String viewName, Locale locale) throws Exception;
    }
    从接口方法的定义可以看出解析视图所需参数是视图名和Locale，不过一般情况下我们只需要视图名找到对应的视图，然后渲染就行，并不需要对不同的
区域使用不同的视图进行显示，如果需要国际化支持也只要将显示的内容或者主题使用国际化支持（具体方法在后面讲述），不过SpringMVC确实有这个功能，
可以让不同的区域使用不同的视图进行显示。ResourceBundleViewResolver就是同时使用视图名和Locale来解析视图。

    ResourceBundleView需要将每一个视图名和对应的视图类型配置到相应的properties文件中，默认使用classpath下的views为baseName的配置文件，
如views.properties,views_zh_CN.properties等，baseName和文件位置都可以配置。对ResourceBundle熟悉的读者应该已经明白来，不同的Locale
会使用不同的配置文件，而他们之间没有任何关系，这样就可以让不同的区域使用不同的view来渲染。

    View是用来渲染页面的，就是要将程序返回到参数填入模板里，生成html文件。这里有两个关键问题：
     01 使用那个模板？
     02 使用什么技术（或者规则）填入参数？
    这其实主要就是ViewResolver主要要做的工作，ViewResolver需要找到渲染所用的模板和所用的技术（也就是视图的类型）进行渲染，具体的渲染则交
给不同的视图自己完成。我们最常使用的UrlBaseViewResolver系列的解析器都是针对但一视图类型进行解析的，只需要找到使用的模板就可以了，比如，
InternalResourceViewResolver只针对jsp类型的视图，FreeMarkerResolver只针对FreeMarker，VelocityViewResolver只针对Velocity。而
ResourceBundleViewResolver、XmlViewResolver、BeanNameViewResolver等解析器可以同时解析多种类型的视图。如前面说过的ResourceBundleViewResolver，
它是根据properties配置文件来解析的，配置文件里就需要同时配置class和url两项类容，比如：
    hello.(class)=org.springframework.web.servlet.view.InternalResourceView
    hello.url=/WEB-INF/go.jsp
    这样就将hello配置到/WEB-INF/go.jsp模板的jsp类型的视图了，当Controller返回hello时会使用这个视图来进行渲染。这里的jsp类型不是根据go.jsp
的后缀来确定的，这个后缀只是个文件名，可以把它改成任意别的格式，视图的类型是根据.class的配置项来确定的。

    XmlViewResolver和ResourceBundleViewResolver类似，只不过它是使用xml文件来配置的。BeanNameViewResolver是根据ViewName从ApplicationContext
容器中查找相应的bean做view的，这个实现比较简单，我们来看一下它的源码。
