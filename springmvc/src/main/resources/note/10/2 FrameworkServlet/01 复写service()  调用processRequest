    Servlet的处理过程：
        从Servlet接口的service方法开始，然后在HttpServlet的service方法中，根据请求的类型，将请求
        路由到了doGet,doHead,doPost,doPut,doDelete,doOptions,doTrace七个方法，
        并做了doHead,doOption,doTrace的默认实现，
        其中doHead调用doGet，然后返回只有header没有body的response。

    在FrameworkServlet中重写了service,doGet,doPost,doPut,doDelete,doOption,doTrace方法（除了doHead的所有处理请求的方法）。
    在service方法中增加了对PATCH类型请求的处理，其它类型的请求直接交给了父类进行处理；

    doOptions和doTrace方法可以通过设置dispatchOptionsRequest和dispatchTraceRequest参数决定是自己处理还是交给父类处理，
    （默认都是交给父类处理，doOptions会在父类的处理结果中增加PATCH类型）；
    doGet,doPost,doPut,doDelete都是自己处理。所有需要自己处理的请求都交给了processRequest方法进行统一处理。

    下面是service和doGet的代码，别的需要自己处理的方法都和doGet类似。
    //org.springframework.web.servlet.FrameworkServlet
    protected void service(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String method = request.getMethod();
        if (method.equalsIgnoreCase(RequestMethod.PATCH.name())) {
            processRequest(request, response);
        }
        else {
            super.service(request, response);
        }
    }

    protected final void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        processRequest(request, response);
    }

    这里所做的事情跟HttpServlet里将不同类型的请求路由道不同方法进行处理的思路正好相反，
    这里又将所有的请求合并到了processRequest方法。
    SpringMVC中对不同请求通过另外一种方式进行处理，
    它将不同类型的请求用不同的Handler进行处理。

    ？！为什么不直接覆盖service，然后再service中直接将请求交给processRequest？
         原因：
         比如，我们为了某种特殊需求需要在Post请求处理前对request做一些处理，
         这时可能会新建一个继承自DispatcherServlet的类，然后覆盖doPost方法，在里面先对request作处理，
         然后再调用supper.doPost(),但父类根本就没有调用doPost，所以这时候就会出问题了。

















