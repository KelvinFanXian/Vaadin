设置webApplicationContext一共有三种方法：

    方法一：
        在构造方法中已经传递webApplicationContext参数，这时只需要对其进行一些设置即可。
        (Servlet3.0之后，可以在程序中使用ServletContext.addServlet方式注册Servlet,这时就可以在新建FrameworkServlet和其子类
        的时候通过构成方法传递已经准备好的webApplicationContext)

    方法二：
        webApplicationContext已经在ServletContext中了。
        只需在配置Servlet的时候,
        将ServletContext中,
        webApplicationContext的name 配置到 contextAttribute属性就可以了。

        比如，在ServletContext中有一个叫haha的webApplicationContext,可以这么将它配置到SpringMVC中：

            <!--web.xml-->
            <servlet>
                <servlet-name>let'sGO</servlet-name>
                <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
                <init-param>
                    <param-name>contextAttribute</param-name>
                    <param-value>haha</param-value>
                </init-param>
                <load-on-startup>1</load-on-startup>
            </servlet>

    方法三：
        在前面两种方式都无效的情况下自己创建一个。（正常情况下就是使用这种方式）
        创建过程在createWebApplicationContext方法中，createWebApplicationContext内部
        又调用configureAndRefreshWebApplicationContext方法：

        //org.springframework.web.servlet.FrameworkServlet
        protected WebApplicationContext createWebApplicationContext(ApplicationContext parent) {
            //获取创建类型
            Class<?> contextClass = getContextClass();
            if (this.logger.isDebugEnabled()) {
                this.logger.debug("Servlet with name '" + getServletName() +
                        "' will try to create custom WebApplicationContext context of class '" +
                        contextClass.getName() + "'" + ", using parent context [" + parent + "]");
            }
            //检查创建类型
            if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {
                throw new ApplicationContextException(
                        "Fatal initialization error in servlet with name '" + getServletName() +
                        "': custom WebApplicationContext class [" + contextClass.getName() +
                        "] is not of type ConfigurableWebApplicationContext");
            }
            //具体创建
            ConfigurableWebApplicationContext wac =
                    (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);

            wac.setEnvironment(getEnvironment());
            wac.setParent(parent);
            //将设置的contextConfigLocation参数传给wac，默认传入WEB-INFO/[ServletName]-Servlet.xml
            wac.setConfigLocation(getContextConfigLocation());

            configureAndRefreshWebApplicationContext(wac);

            return wac;
        }

