    在spring的xml文件中通过命名空间配置的标签时怎么解析的

    ？对于一个具体的命名空间，spring是怎么找到解析它的类的呢

    其实在其实在spring中是把解析标签的类都放到了相应的ＭＥＴＡ－ＩＮＦ目录下的spring.handlers文件中，然后从哪里面找。

    比如，mvc命名空间的解析设置在spring-webmvc-4.1.5.RELEASE.jar包下META-INF/spring.handlers文件中，其内容为
        http\://www.springframework.org/schema/mvc=org.springframework.web.servlet.config.MvcNamespaceHandler
      这也就告诉我们，处理mvc这个命名空间的配置要使用MvcNamespaceHandler
      (在其内部将mvc:annotation-driven的解析交给AnnotationDrivenBeanDefinitionParser).

    解析配置的接口是org.springframework.beans.factory.xml.NamespaceHandler,他的继承结构
                      MvcNamespaceHandler extends NamespaceHandlerSupport implements NamespaceHandler
                      (NamespaceHandlerSupport子类有很多)
        另有：SimplePropertyNamespaceHandler implements NamespaceHandler
             SimpleConstructorNamespaceHandler implements NamespaceHandler
        SimpleConstructorNamespaceHandler用于统一对通过c:配置的构造方法进行解析
        SimplePropertyNamespaceHandler用于统一对通过p:配置的参数进行解析

     NamespaceHandler共三个方法: init,parse,decorate
     //org.springframework.beans.factory.xml.NamespaceHandler;
     public interface NamespaceHandler {

     	void init();

     	BeanDefinition parse(Element element, ParserContext parserContext);

     	BeanDefinitionHolder decorate(Node source, BeanDefinitionHolder definition, ParserContext parserContext);

     }

     NamespaceHandlerSupport并没有做具体的解析工作，而是定义了三个处理器 parse,decorators,attributeDecorators,
     分别用于处理解析工作、处理标签类型、处理属性类型的装饰。
     接口的parse和decorate方法的执行方式是先找到相应的处理器，然后进行处理。
     具体的处理由子类实现，然后注册到NamespaceHandlerSupport上面。

     所以要定义一个命名空间的解析器，只需要在init中定义相应的 parse,decorate,attributeDecorators并注册到NamespaceHandlerSupport
     上面。下面是NamespaceHandlerSupport的代码以及解析mvc命名空间的NvcNamespaceHandler的代码：

     //org.springframework.beans.factory.xml.NamespaceHandlerSupport
     public abstract class NamespaceHandlerSupport implements NamespaceHandler {

     	private final Map<String, BeanDefinitionParser> parsers =
     			new HashMap<String, BeanDefinitionParser>();

     	private final Map<String, BeanDefinitionDecorator> decorators =
     			new HashMap<String, BeanDefinitionDecorator>();

     	private final Map<String, BeanDefinitionDecorator> attributeDecorators =
     			new HashMap<String, BeanDefinitionDecorator>();

     	@Override
     	public BeanDefinition parse(Element element, ParserContext parserContext) {
     		return findParserForElement(element, parserContext).parse(element, parserContext);
     	}

     	private BeanDefinitionParser findParserForElement(Element element, ParserContext parserContext) {
     		String localName = parserContext.getDelegate().getLocalName(element);
     		BeanDefinitionParser parser = this.parsers.get(localName);
     		if (parser == null) {
     			parserContext.getReaderContext().fatal(
     					"Cannot locate BeanDefinitionParser for element [" + localName + "]", element);
     		}
     		return parser;
     	}

     	@Override
     	public BeanDefinitionHolder decorate(
     			Node node, BeanDefinitionHolder definition, ParserContext parserContext) {

     		return findDecoratorForNode(node, parserContext).decorate(node, definition, parserContext);
     	}

     	private BeanDefinitionDecorator findDecoratorForNode(Node node, ParserContext parserContext) {
     		BeanDefinitionDecorator decorator = null;
     		String localName = parserContext.getDelegate().getLocalName(node);
     		//先判断是标签还是属性，然后再调用相应方法进行处理
     		if (node instanceof Element) {
     			decorator = this.decorators.get(localName);
     		}
     		else if (node instanceof Attr) {
     			decorator = this.attributeDecorators.get(localName);
     		}
     		else {
     			parserContext.getReaderContext().fatal(
     					"Cannot decorate based on Nodes of type [" + node.getClass().getName() + "]", node);
     		}
     		if (decorator == null) {
     			parserContext.getReaderContext().fatal("Cannot locate BeanDefinitionDecorator for " +
     					(node instanceof Element ? "element" : "attribute") + " [" + localName + "]", node);
     		}
     		return decorator;
     	}

     	protected final void registerBeanDefinitionParser(String elementName, BeanDefinitionParser parser) {
     		this.parsers.put(elementName, parser);
     	}

     	protected final void registerBeanDefinitionDecorator(String elementName, BeanDefinitionDecorator dec) {
     		this.decorators.put(elementName, dec);
     	}

     	protected final void registerBeanDefinitionDecoratorForAttribute(String attrName, BeanDefinitionDecorator dec) {
     		this.attributeDecorators.put(attrName, dec);
     	}

     }


    //org.springframework.web.servlet.config.MvcNamespaceHandler
    public class MvcNamespaceHandler extends NamespaceHandlerSupport {

    	@Override
    	public void init() {
    		registerBeanDefinitionParser("annotation-driven", new AnnotationDrivenBeanDefinitionParser());
    		registerBeanDefinitionParser("default-servlet-handler", new DefaultServletHandlerBeanDefinitionParser());
    		registerBeanDefinitionParser("interceptors", new InterceptorsBeanDefinitionParser());
    		registerBeanDefinitionParser("resources", new ResourcesBeanDefinitionParser());
    		registerBeanDefinitionParser("view-controller", new ViewControllerBeanDefinitionParser());
    	}

    }

    从这里就可以看到mvc命名空间使用到的所有解析器。
  　其中解析"annotation-driven"的，就是 AnnotationDrivenBeanDefinitionParser()
